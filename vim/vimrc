""""""""""""""""""""""""""
" Hemmer's .vimrc config "
""""""""""""""""""""""""""

"""""""""""""""""""""""""""""
" 1. General
"""""""""""""""""""""""""""""

set nocompatible
set encoding=utf-8

" setup plugin managment
filetype off

call plug#begin('~/.vim/plugged')

Plug 'simnalamburt/vim-mundo'           " fork of gundo
Plug 'kien/ctrlp.vim'                   " fast file opening
Plug 'vim-scripts/buftabs'
Plug 'scrooloose/nerdcommenter'

Plug 'vim-scripts/Python-Syntax-Folding'
Plug 'kevinw/pyflakes-vim'

Plug 'ervandew/supertab'
Plug 'tpope/vim-repeat'
Plug 'svermeulen/vim-easyclip'
Plug 'hemmer/toggle-all-folds'

Plug 'gerw/vim-latex-suite'             " range of macros and expansions for latex
Plug 'matze/vim-tex-fold'               " folding of sections
Plug 'gibiansky/vim-latex-objects'      " allow cim (eg. change in $\beta$)

Plug 'godlygeek/tabular'                " needed for vim-markdown
Plug 'plasticboy/vim-markdown'

Plug 'kana/vim-arpeggio'

if has('nvim')
    Plug 'benekastah/neomake'
    nnoremap <F9> :Neomake!<CR>
else
    Plug 'ConradIrwin/vim-bracketed-paste'
    Plug 'scrooloose/syntastic'
    Plug 'tpope/vim-dispatch'
    nnoremap <F9> :Make<CR>
endif

call plug#end()
call arpeggio#load()         " use chords
filetype plugin indent on



" bash like filename completion
set wildmode=longest,list,full
set wildmenu

" on some machines backspace behaves strangely
set backspace=indent,eol,start

" reload files on change
set autoread
" make files with shebangs executable
au BufWritePost * if getline(1) =~ "^#!" | silent !chmod a+x <afile>

set shell=/bin/bash




if has('nvim')
    " TODO
else
    set ttymouse=xterm2         " can use mouse in terminal
endif


""""""""""""""""""""""""""""""
" 2. Plugin Specific
"""""""""""""""""""""""""""""

let g:buftabs_marker_modified = "*"

" mappings for easy-clip
nmap M <Plug>MoveMotionEndOfLinePlug
nnoremap ! m

let g:SuperTabDefaultCompletionType = 'context'

" file finding
let g:ctrlp_map = '<c-e>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_max_depth = 2

" type of latex
let g:tex_flavour = 'latex'
set suffixes+=.log,.aux,.bbl,.blg,.idx,.ilg,.ind,.out,.pdf

if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" comments have space after
let NERDSpaceDelims=1

"""""""""""""""""""""""
" 3. Interface
"""""""""""""""""""""""


colorscheme molokai256mod   " nice colourscheme
syntax on                   " we want syntax highlighting
set mouse=nvc               " use mouse apart from i mode (for middle click)
set showcmd                 " show command in status line

" use relative linenumbering (where possible)
if version >= 703
    set relativenumber
    set number
else
    set number
endif


" always show a status-line
set laststatus=2
" change status-line colours depending on whether we are in insert mode
hi StatusLine term=reverse ctermfg=232 ctermbg=241 cterm=none
au InsertEnter * hi StatusLine term=reverse ctermfg=241 ctermbg=232 cterm=none
au InsertLeave * hi StatusLine term=reverse ctermfg=232 ctermbg=241 cterm=none




""""""""""""""""""
" General Config "
""""""""""""""""""

" save on double tap ESC
map <ESC><ESC> :w<CR>
set autowriteall                        " save all files when compiling, etc.
set hidden                              " allow hiding unsaved buffers

" save when entering/leaving insert mode
", only if the filename @% is not empty
autocmd InsertEnter,InsertLeave * if @% != '' | w
autocmd BufWritePre * :%s/\s\+$//e                  " trim trailing space on save


let loaded_matchparen = 1

" disable help and Ex mode
nnoremap K <Nop>
nnoremap Q <Nop>

" recentre search results
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz


" insert newline without leaving insert
nnoremap <CR> o<Esc>

" map : to ; for going easy on the fingers
nore ; :

set autoindent                  " copy indentation from previous line
set smartindent                 " automatically insert an extra tab when appropriate
set breakindent                 " linebreak follows indentation
set tabstop=4                   " how many characters is a tab
set shiftwidth=4                " how many characters to indent by
set expandtab                   " use spaces instead of a tab character

set incsearch                   " add incremental search

set backup                      " custom backup directories
set backupdir=~/.vim/backup     " NOTE: these will need to be created
set directory=~/.vim/tmp        " when cloning the vim config from github



" disable autocomment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" add dictionary support
autocmd FileType * exec("setlocal dictionary+=".$HOME."/.vim/dictionaries/".expand('<amatch>'))
set complete+=k

" set grep for latex usage
set grepprg=grep\ -nH\ $*




""""""""""""""""""
" Custom Keymaps "
""""""""""""""""""

" remove current buffer
 map <silent> <F2> :bd<CR>
imap <silent> <F2> <Esc>:bd<CR>

" F3 key is currently free
nnoremap <F3>= :Tabularize /=<CR>

" toggle undo history
nnoremap <silent> <F4> :GundoToggle<CR>

" toggle comment
 map <F6> <Leader>c<space>
imap <F6> <ESC> <Leader>c<space>

" code folding (F8 toggles current fold, F7 toggles all)
 noremap <silent> <F7> :call ToggleAllFolds()<CR>
inoremap <silent> <F7> <Esc>:call ToggleAllFolds()<CR>
 map <F8> zA
imap <F8> <Esc>zA

" disable arrow keys for learning!
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" move lines up or down
 map <C-Down> mmp
imap <C-Down> <Esc>mmp
 map <C-Up> mmkP
imap <C-Up> <Esc>mmkP

" pressing down on a wrapped line goes to the next row, not the next line
nnoremap j gj
nnoremap k gk

Arpeggio inoremap kj <Esc>
Arpeggio inoremap jk <Esc>

" move between functions with Tab / Shift+Tab in normal mode
nmap <silent> <Tab> :silent! normal }<CR>
nmap <silent> <S-Tab> :silent! normal {<CR>

" switch buffer
noremap <C-left> :bprev<CR>
noremap <C-right> :bnext<CR>



" make Y behave like it should
map Y y$


" Automatically open, but do not go to (if there are errors) the quickfix /
" location list window, or close it when is has become empty.
" Note: Must allow nesting of autocmds to enable any customizations for quickfix
" buffers.
" Note: Normally, :cwindow jumps to the quickfix window if the command opens it
" (but not if it's already open). However, as part of the autocmd, this doesn't
" seem to happen.
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow



""""""""""""""""""""""
" Completion Configs "
""""""""""""""""""""""

set ofu=syntaxcomplete#Complete
set completeopt=menu

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

autocmd BufNewFile,BufRead *.tex set filetype=tex
autocmd BufNewFile,BufRead *.c   set filetype=c
let g:tex_flavour = "latex"



"""""""""""""""""""""""""""""""""""""""
" Substitution Macros (used in c.vim) "
"""""""""""""""""""""""""""""""""""""""

" Help delete character if it is 'empty space' stolen from Vim manual
function! Eatchar()
  let c = nr2char(getchar())
  return (c =~ '\s') ? '' : c
endfunction

" Replace abbreviation if we're not in comment or other unwanted places
" stolen from Luc Hermitte's excellent http://hermitte.free.fr/vim/
function! MapNoContext(key, seq)
  let syn = synIDattr(synID(line('.'),col('.')-1,1),'name')
  if syn =~? 'comment\|string\|character\|doxygen'
    return a:key
  else
    exe 'return "' .
    \ substitute( a:seq, '\\<\(.\{-}\)\\>', '"."\\<\1>"."', 'g' ) . '"'
  endif
endfunction

" Create abbreviation suitable for MapNoContext
function! Iab (ab, full)
  exe "iab <silent> <buffer> ".a:ab." <C-R>=MapNoContext('".
    \ a:ab."', '".escape (a:full.'<C-R>=Eatchar()<CR>', '<>\"').
    \"')<CR>"
endfunction


